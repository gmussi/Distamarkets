/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface DistamarketsInterface extends utils.Interface {
  functions: {
    "calculateReward(bytes32,uint256,address)": FunctionFragment;
    "cancelMarket(bytes32)": FunctionFragment;
    "closeMarket(bytes32,uint256)": FunctionFragment;
    "collectFees(bytes32)": FunctionFragment;
    "createMarket(bytes32,address,uint256,uint256)": FunctionFragment;
    "disputeMarket(bytes32,uint256)": FunctionFragment;
    "getMarket(bytes32)": FunctionFragment;
    "getStake(bytes32,uint256,address)": FunctionFragment;
    "onApprovalReceived(address,uint256,bytes)": FunctionFragment;
    "refund(bytes32,uint256)": FunctionFragment;
    "removeStake(bytes32,uint256,uint256)": FunctionFragment;
    "resolveMarket(bytes32,uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "tokenBalance()": FunctionFragment;
    "updateBalance()": FunctionFragment;
    "withdrawReward(bytes32,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calculateReward"
      | "cancelMarket"
      | "closeMarket"
      | "collectFees"
      | "createMarket"
      | "disputeMarket"
      | "getMarket"
      | "getStake"
      | "onApprovalReceived"
      | "refund"
      | "removeStake"
      | "resolveMarket"
      | "token"
      | "tokenBalance"
      | "updateBalance"
      | "withdrawReward"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateReward",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelMarket",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeMarket",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectFees",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarket",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeMarket",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarket",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStake",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onApprovalReceived",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeStake",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveMarket",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawReward",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onApprovalReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawReward",
    data: BytesLike
  ): Result;

  events: {
    "MarketCreated(bytes32,address,uint256,uint256)": EventFragment;
    "MarketStateChanged(bytes32,uint8,uint8)": EventFragment;
    "StakeChanged(bytes32,uint256,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MarketCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketStateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeChanged"): EventFragment;
}

export interface MarketCreatedEventObject {
  marketId: string;
  oracle: string;
  closingTime: BigNumber;
  numOutcomes: BigNumber;
}
export type MarketCreatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  MarketCreatedEventObject
>;

export type MarketCreatedEventFilter = TypedEventFilter<MarketCreatedEvent>;

export interface MarketStateChangedEventObject {
  marketId: string;
  oldState: number;
  newState: number;
}
export type MarketStateChangedEvent = TypedEvent<
  [string, number, number],
  MarketStateChangedEventObject
>;

export type MarketStateChangedEventFilter =
  TypedEventFilter<MarketStateChangedEvent>;

export interface StakeChangedEventObject {
  marketId: string;
  outcomeId: BigNumber;
  user: string;
  oldBalance: BigNumber;
  newBalance: BigNumber;
}
export type StakeChangedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber],
  StakeChangedEventObject
>;

export type StakeChangedEventFilter = TypedEventFilter<StakeChangedEvent>;

export interface Distamarkets extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DistamarketsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateReward(
      marketId_: PromiseOrValue<BytesLike>,
      outcomeId_: PromiseOrValue<BigNumberish>,
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cancelMarket(
      marketId_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeMarket(
      marketId_: PromiseOrValue<BytesLike>,
      finalOutcomeId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectFees(
      marketId_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createMarket(
      marketId_: PromiseOrValue<BytesLike>,
      oracle_: PromiseOrValue<string>,
      closingTime_: PromiseOrValue<BigNumberish>,
      numOutcomes_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disputeMarket(
      marketId_: PromiseOrValue<BytesLike>,
      outcomeId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getMarket(
      marketId_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & { state: number }
    >;

    getStake(
      marketId_: PromiseOrValue<BytesLike>,
      outcomeId_: PromiseOrValue<BigNumberish>,
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    onApprovalReceived(
      sender_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    refund(
      marketId_: PromiseOrValue<BytesLike>,
      outcomeId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeStake(
      marketId_: PromiseOrValue<BytesLike>,
      outcomeId_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolveMarket(
      marketId_: PromiseOrValue<BytesLike>,
      finalOutcomeId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokenBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateBalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawReward(
      marketId_: PromiseOrValue<BytesLike>,
      outcomeId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  calculateReward(
    marketId_: PromiseOrValue<BytesLike>,
    outcomeId_: PromiseOrValue<BigNumberish>,
    user_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cancelMarket(
    marketId_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeMarket(
    marketId_: PromiseOrValue<BytesLike>,
    finalOutcomeId_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectFees(
    marketId_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createMarket(
    marketId_: PromiseOrValue<BytesLike>,
    oracle_: PromiseOrValue<string>,
    closingTime_: PromiseOrValue<BigNumberish>,
    numOutcomes_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disputeMarket(
    marketId_: PromiseOrValue<BytesLike>,
    outcomeId_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getMarket(
    marketId_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & { state: number }
  >;

  getStake(
    marketId_: PromiseOrValue<BytesLike>,
    outcomeId_: PromiseOrValue<BigNumberish>,
    user_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  onApprovalReceived(
    sender_: PromiseOrValue<string>,
    amount_: PromiseOrValue<BigNumberish>,
    data_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  refund(
    marketId_: PromiseOrValue<BytesLike>,
    outcomeId_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeStake(
    marketId_: PromiseOrValue<BytesLike>,
    outcomeId_: PromiseOrValue<BigNumberish>,
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolveMarket(
    marketId_: PromiseOrValue<BytesLike>,
    finalOutcomeId_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  tokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  updateBalance(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawReward(
    marketId_: PromiseOrValue<BytesLike>,
    outcomeId_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateReward(
      marketId_: PromiseOrValue<BytesLike>,
      outcomeId_: PromiseOrValue<BigNumberish>,
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelMarket(
      marketId_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    closeMarket(
      marketId_: PromiseOrValue<BytesLike>,
      finalOutcomeId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    collectFees(
      marketId_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    createMarket(
      marketId_: PromiseOrValue<BytesLike>,
      oracle_: PromiseOrValue<string>,
      closingTime_: PromiseOrValue<BigNumberish>,
      numOutcomes_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    disputeMarket(
      marketId_: PromiseOrValue<BytesLike>,
      outcomeId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getMarket(
      marketId_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & { state: number }
    >;

    getStake(
      marketId_: PromiseOrValue<BytesLike>,
      outcomeId_: PromiseOrValue<BigNumberish>,
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onApprovalReceived(
      sender_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    refund(
      marketId_: PromiseOrValue<BytesLike>,
      outcomeId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeStake(
      marketId_: PromiseOrValue<BytesLike>,
      outcomeId_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    resolveMarket(
      marketId_: PromiseOrValue<BytesLike>,
      finalOutcomeId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    tokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    updateBalance(overrides?: CallOverrides): Promise<void>;

    withdrawReward(
      marketId_: PromiseOrValue<BytesLike>,
      outcomeId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MarketCreated(bytes32,address,uint256,uint256)"(
      marketId?: PromiseOrValue<BytesLike> | null,
      oracle?: PromiseOrValue<string> | null,
      closingTime?: PromiseOrValue<BigNumberish> | null,
      numOutcomes?: null
    ): MarketCreatedEventFilter;
    MarketCreated(
      marketId?: PromiseOrValue<BytesLike> | null,
      oracle?: PromiseOrValue<string> | null,
      closingTime?: PromiseOrValue<BigNumberish> | null,
      numOutcomes?: null
    ): MarketCreatedEventFilter;

    "MarketStateChanged(bytes32,uint8,uint8)"(
      marketId?: PromiseOrValue<BytesLike> | null,
      oldState?: PromiseOrValue<BigNumberish> | null,
      newState?: PromiseOrValue<BigNumberish> | null
    ): MarketStateChangedEventFilter;
    MarketStateChanged(
      marketId?: PromiseOrValue<BytesLike> | null,
      oldState?: PromiseOrValue<BigNumberish> | null,
      newState?: PromiseOrValue<BigNumberish> | null
    ): MarketStateChangedEventFilter;

    "StakeChanged(bytes32,uint256,address,uint256,uint256)"(
      marketId?: PromiseOrValue<BytesLike> | null,
      outcomeId?: null,
      user?: PromiseOrValue<string> | null,
      oldBalance?: null,
      newBalance?: null
    ): StakeChangedEventFilter;
    StakeChanged(
      marketId?: PromiseOrValue<BytesLike> | null,
      outcomeId?: null,
      user?: PromiseOrValue<string> | null,
      oldBalance?: null,
      newBalance?: null
    ): StakeChangedEventFilter;
  };

  estimateGas: {
    calculateReward(
      marketId_: PromiseOrValue<BytesLike>,
      outcomeId_: PromiseOrValue<BigNumberish>,
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelMarket(
      marketId_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeMarket(
      marketId_: PromiseOrValue<BytesLike>,
      finalOutcomeId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectFees(
      marketId_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createMarket(
      marketId_: PromiseOrValue<BytesLike>,
      oracle_: PromiseOrValue<string>,
      closingTime_: PromiseOrValue<BigNumberish>,
      numOutcomes_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disputeMarket(
      marketId_: PromiseOrValue<BytesLike>,
      outcomeId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getMarket(
      marketId_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStake(
      marketId_: PromiseOrValue<BytesLike>,
      outcomeId_: PromiseOrValue<BigNumberish>,
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onApprovalReceived(
      sender_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    refund(
      marketId_: PromiseOrValue<BytesLike>,
      outcomeId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeStake(
      marketId_: PromiseOrValue<BytesLike>,
      outcomeId_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolveMarket(
      marketId_: PromiseOrValue<BytesLike>,
      finalOutcomeId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    updateBalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawReward(
      marketId_: PromiseOrValue<BytesLike>,
      outcomeId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateReward(
      marketId_: PromiseOrValue<BytesLike>,
      outcomeId_: PromiseOrValue<BigNumberish>,
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelMarket(
      marketId_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeMarket(
      marketId_: PromiseOrValue<BytesLike>,
      finalOutcomeId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectFees(
      marketId_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createMarket(
      marketId_: PromiseOrValue<BytesLike>,
      oracle_: PromiseOrValue<string>,
      closingTime_: PromiseOrValue<BigNumberish>,
      numOutcomes_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disputeMarket(
      marketId_: PromiseOrValue<BytesLike>,
      outcomeId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getMarket(
      marketId_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStake(
      marketId_: PromiseOrValue<BytesLike>,
      outcomeId_: PromiseOrValue<BigNumberish>,
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onApprovalReceived(
      sender_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    refund(
      marketId_: PromiseOrValue<BytesLike>,
      outcomeId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeStake(
      marketId_: PromiseOrValue<BytesLike>,
      outcomeId_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolveMarket(
      marketId_: PromiseOrValue<BytesLike>,
      finalOutcomeId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateBalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawReward(
      marketId_: PromiseOrValue<BytesLike>,
      outcomeId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
